
# /usr/lib/YaST2/bin/y2base example.ycp stdio

{
    import "LibStorage";
    import "LibStorage::StorageInterface";
    import "LibStorage::FsCapabilities";
    import "LibStorage::PartitionInfo";


    any o = nil;


    void test1 ()
    {
    list <string> disks = [];
    LibStorage::StorageInterface::getDisks (o, disks);
    foreach (string disk, disks, {
	y2milestone ("found disk %1", disk);

	list<any> partitioninfos = [];
	LibStorage::StorageInterface::getPartitionsOfDisk (o, disk, partitioninfos);
	foreach (any partitioninfo, partitioninfos, {
	    y2milestone ("found partition %1", LibStorage::PartitionInfo::swig_name_get (partitioninfo));
	});
    });
    }


    void test2 ()
    {
	string tmp = "hda1";
	string mount_point = "";
	LibStorage::StorageInterface::getMountPoint (o, tmp, mount_point);
	y2milestone ("mount point of /dev/hda2 is %1", mount_point);
    }


    void test3 ()
    {
	any fscapabilities = LibStorage::FsCapabilities::New ();
	LibStorage::StorageInterface::getFsCapabilities (o, LibStorage::REISERFS (), fscapabilities);
	y2milestone ("isExtendable is %1", LibStorage::FsCapabilities::swig_isExtendable_get (fscapabilities));
    }


    void test4 ()
    {
	string tmp = "hda";
	integer i1 = LibStorage::StorageInterface::cylinderToKb (o, tmp, 10);
	y2milestone ("i1 = %1", i1);

	integer i2 = LibStorage::StorageInterface::kbToCylinder (o, tmp, 100000);
	y2milestone ("i2 = %1", i2);
    }


    void test5 ()
    {
	string tmp = "hda1";
	boolean b1 = true;
	// LibStorage::StorageInterface::getCrypt (o, tmp, b1);
	y2milestone ("b1 = %1", b1);
    }


    void test6 ()
    {
	LibStorage::StorageInterface::setRecursiveRemoval (o, false);
	boolean b = LibStorage::StorageInterface::getRecursiveRemoval (o);
	y2milestone ("b = %1", b);
    }


    LibStorage::initDefaultLogger ();

    o = LibStorage::createStorageInterface (true, false, true);

    test1 ();
    test2 ();
    test3 ();
    test4 ();
    test5 ();
    test6 ();

    LibStorage::destroyStorageInterface (o);
}
